#!/bin/bash
# Script untuk full update frontend: ABI + Contract Addresses
# Usage: ./scripts/update-frontend.sh [NETWORK]
# Example: ./scripts/update-frontend.sh sepolia

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

NETWORK=${1:-"sepolia"}

echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}   Frontend Update Script${NC}"
echo -e "${BLUE}   Network: ${NETWORK}${NC}"
echo -e "${BLUE}================================${NC}\n"

# Step 1: Generate ABIs
echo -e "${YELLOW}Step 1: Generating ABIs...${NC}"
./scripts/generate-abis.sh
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: ABI generation failed${NC}"
    exit 1
fi

# Step 2: Update contract addresses (if deployment info exists)
BROADCAST_DIR="broadcast/Deploy.s.sol"
RUN_LATEST=""

if [ "$NETWORK" = "sepolia" ]; then
    RUN_LATEST="$BROADCAST_DIR/84532/run-latest.json"
elif [ "$NETWORK" = "mainnet" ]; then
    RUN_LATEST="$BROADCAST_DIR/8453/run-latest.json"
fi

if [ -f "$RUN_LATEST" ]; then
    echo -e "${YELLOW}Step 2: Extracting deployed addresses from $RUN_LATEST...${NC}"

    # Extract addresses using node
    node -e "
        const fs = require('fs');
        const broadcast = JSON.parse(fs.readFileSync('$RUN_LATEST', 'utf8'));

        const contracts = {};

        // Find contract deployments
        broadcast.transactions.forEach(tx => {
            if (tx.transactionType === 'CREATE') {
                const contractName = tx.contractName;
                const address = tx.contractAddress;

                if (contractName === 'MockToken') {
                    contracts.token = address;
                } else if (contractName === 'ForterGovernance') {
                    contracts.governance = address;
                } else if (contractName === 'ReputationNFT') {
                    contracts.reputationNFT = address;
                } else if (contractName === 'Forter') {
                    contracts.forter = address;
                } else if (contractName === 'StakingPool') {
                    contracts.stakingPool = address;
                }
            }
        });

        console.log(JSON.stringify(contracts, null, 2));
    " > /tmp/deployed-addresses.json

    echo -e "${GREEN}✓ Deployed addresses:${NC}"
    cat /tmp/deployed-addresses.json
    echo ""

    # Update contracts.ts
    CONTRACTS_FILE="../frontend/src/config/contracts.ts"

    if [ -f "$CONTRACTS_FILE" ]; then
        echo -e "${YELLOW}Step 3: Updating $CONTRACTS_FILE...${NC}"

        # Extract addresses
        FORTER=$(node -e "console.log(require('/tmp/deployed-addresses.json').forter || '')")
        REPUTATION=$(node -e "console.log(require('/tmp/deployed-addresses.json').reputationNFT || '')")
        STAKING=$(node -e "console.log(require('/tmp/deployed-addresses.json').stakingPool || '')")
        GOVERNANCE=$(node -e "console.log(require('/tmp/deployed-addresses.json').governance || '')")
        TOKEN=$(node -e "console.log(require('/tmp/deployed-addresses.json').token || '')")

        # Create updated contracts.ts
        cat > "$CONTRACTS_FILE" << EOF
import ForterABI from '../abis/Forter.json';
import ReputationNFTABI from '../abis/ReputationNFT.json';
import StakingPoolABI from '../abis/StakingPool.json';
import ForterGovernanceABI from '../abis/ForterGovernance.json';
import MockTokenABI from '../abis/MockToken.json';

/**
 * Contract addresses deployed on Base ${NETWORK^}
 * Auto-generated by scripts/update-frontend.sh
 */
export const contractAddresses = {
  forter: '${FORTER}' as const,
  reputationNFT: '${REPUTATION}' as const,
  stakingPool: '${STAKING}' as const,
  governance: '${GOVERNANCE}' as const,
  token: '${TOKEN}' as const,
} as const;

/**
 * Contract configurations with addresses and ABIs
 * Ready to use with wagmi/viem
 */
export const contracts = {
  forter: {
    address: contractAddresses.forter,
    abi: ForterABI,
  },
  reputationNFT: {
    address: contractAddresses.reputationNFT,
    abi: ReputationNFTABI,
  },
  stakingPool: {
    address: contractAddresses.stakingPool,
    abi: StakingPoolABI,
  },
  governance: {
    address: contractAddresses.governance,
    abi: ForterGovernanceABI,
  },
  token: {
    address: contractAddresses.token,
    abi: MockTokenABI,
  },
} as const;

// Re-export ABIs for direct access
export { ForterABI, ReputationNFTABI, StakingPoolABI, ForterGovernanceABI, MockTokenABI };
EOF

        echo -e "${GREEN}✓ contracts.ts updated with new addresses${NC}\n"

        # Clean up
        rm /tmp/deployed-addresses.json
    else
        echo -e "${YELLOW}⚠ contracts.ts not found, skipping address update${NC}\n"
    fi
else
    echo -e "${YELLOW}⚠ No deployment broadcast found for ${NETWORK}${NC}"
    echo -e "${YELLOW}  Run deployment first or manually update contract addresses${NC}\n"
fi

echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}✓ Frontend update complete!${NC}"
echo -e "${GREEN}================================${NC}\n"

echo -e "${BLUE}Summary:${NC}"
echo -e "  ✓ ABIs generated"
if [ -f "$RUN_LATEST" ]; then
    echo -e "  ✓ Contract addresses updated"
else
    echo -e "  ⚠ Contract addresses NOT updated (no deployment found)"
fi

echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo -e "  1. cd ../frontend"
echo -e "  2. npm run dev (or yarn dev)"
echo -e "  3. Test contract integration"
echo ""
